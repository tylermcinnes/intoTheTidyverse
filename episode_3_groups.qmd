---
title: "Episode 3 Groups"
engine: knitr
format: live-html
webr:
  packages:
    - dplyr
    - Lahman
---

{{< include ./_extensions/r-wasm/live/_knitr.qmd >}}

## The group_by() function

Sometimes we will have a single object that has data for many different groups. This could include many samples from e.g., treatment vs control, or it could be many groups (e.g., three replicates each from many samples). Other examples of groups could include months or years in which data was collected, or distinct physical locations where data was collected. 
Whatever the specifics, group_by() is a function that will allow us to keep all our data in a single object and *also* recognise the different groups or substructure within the object. 


```{webr}
bbBatting <- Lahman::Batting

bbBatting |> head()
```

First, let's see how we can use the mean function to calculate the average number of games (G) in the dataset:
```{r}
bbBatting$G |> mean()
```
#### Note on the dataset

Remember that for this dataset, each row represents a players data. E.g., the first row shows player aardsda01's 2004 results. They played 11 games for the SFN team, and scored 0 runs (R) (probably because they are a pitcher, rather than a batter). 

Now let's say I want to calculate the mean number of games for each team. First, I'll use group_by() on the teamID column. Second, I'll use the summarize() and mean() functions to generate a new column of data showing the mean number of games for each team. 

```{webr}
bbBatting |> group_by(teamID) |> summarize(teamMeanGames = mean(G)) 
```

#### Exercise

Which year had the highest average number of Runs (the R column) scored? Which year had the lowest average number of runs?

Treat this as an open book, group exercise - consult each other, your notes from previous lessons, anything you like. 

```{webr}
#| exercise: ex3_1
______
```

::: { .hint exercise="ex3_1"}
::: { .callout-note collapse="false"}

Hint 1

You will need to pipe the bbBatting data to the group_by() function, with yearID as the argument.

Pipe this information to summarize(). Within summarize, create a new column name and define it was mean(R). 

To get the highest and lowest, you will need to rearrange the output of summarize() using a function, and then use separate functions to view the highest and lowest averages.

:::
:::

::: { .hint exercise="ex3_1"}
::: { .callout-note collapse="false"}

Hint 2

Pipe the output of summarize() to the arrange() function, then use the head() and tail() function. Alternatively, you can use head() only if you prefer to add the desc() function within arrange().

:::
:::

::: { .solution exercise="ex3_1" }
::: { .callout-note collapse="false"}

bbBatting |> group_by(yearID) |> summarize(yearlyMeanRuns = mean(R)) |> arrange(yearlyMeanGames) |> head()

:::
:::


## Use of summarize() with multiple arguments

## Use of slice()


