---
title: "Episode 3 - Transforming your Data"
---

Remember that at the start of this workshop I mentioned there is a function that can identify differentially expressed genes? I also said that in order to get that function to work, you would need to spend some time organising your data. This is the reality of modern bioinformatics - there are many functions and R packages available to us and they can do some very powerful things. A major challenge is usually getting our data into a format that is suitable for feeding into these existing functions.

In this episode we will look at a few useful functions which can be used to transform our data (that is, to change the format of the data). Transformations are extremely useful and even if you don't do much else with R, the ability to quickly and easily manipulate data formats will save you time and frustration.

```{r}
# BiocManager::install("tidyverse")
library(tidyverse)
```
This has loaded the entire tidyverse, which includes the core packages listed above (dplyr, readr, forcats etc.,). 
Note that we see a message about "conflicts" - this occurs when two functions from different packages have the same name. We can see this with "filter()" which does one thing in the dplyr package, and a different thing in the stats package. Because we have loaded the dplyr package, if we want the stats-specific version of filter, we need to type stats::filter. 

Use the read.csv function to import the Wilderlab eDNA dataset. More information about this dataset can be found at:

```{r}

samples <- read_csv("samples.csv")
samples |> View()

records <- read_csv("records.csv")
records |> View()

samples |> spec()

# Shows the column specifications or types. E.g., SID is col_double() - any non-interger number, collection date is a date. 
```



