---
title: "Episode 2 Transforming your data"
engine: knitr
format: live-html
webr:
  packages:
    - dplyr
    - Lahman
---

{{< include ./_extensions/r-wasm/live/_knitr.qmd >}}

In this episode we will see how a small number of functions can be used to *transform* your data. What do we mean by *transform*? When we receive raw data we often need to perform some basic tidying, sorting, or trimming to get it into a format that is clean and easy for us to work with. 

Transforming data can involve:

- Ordering rows or columns (e.g., to rank p.values or to sort samples alphabetically).

- Removing rows or columns, either based on Boolean operators (e.g., keep values > x, or < y) or to remove duplicates. 

- Rename variables (e.g., from "W" to "Win").

- Create new columns based on other columns (e.g., success = wins / losses).

We can do all of these transformations using a small number of functions from the dplyr package. The dplyr functions are sometimes referred to as 'verbs', since they have descriptive names that identify what the function does.

## The dplyr verbs

To prevent the feeling of being overwhelmed by new functions, let's start by listing the functions. To work with rows we only have three: **arrange()**, **filter()**, **distinct()**. To work with columns, we have four: **relocate()**, **select()**, **rename()**, **mutate()**. 

Of these seven new functions, six of them have names that are probably easy to interpret: arrange() and relocate() change the order of rows and columns, filter() and select() keep only certain rows and columns, distinct() returns only unique rows (removes duplicates), and rename() changes the name of columns. Only mutate() is not immediately obvious: mutate creates a new column based on one or more other columns (we can think of the data being mutated into a new form). 

For each of these seven functions we will look at the basic syntax, how the arguments can be used, and complete some exercises. 

First, let's take a quick look at the dataset we are using for this episode: The Lahman package has a collection of baseball datasets, including batting, pitching and fielding records. We will focus on the pitching records.  
```{webr}
bbPitching <- Lahman::Pitching

bbPitching |> head()
```

This is reasonably representative of a dataset, in that it's got a lot of column names that don't immediately mean anything to us. If we wanted to, we could find more details online which will explain everything in the (Lahman package)[https://cran.r-project.org/web/packages/Lahman/Lahman.pdf]. Terms will be explained as we get to them, so don't feel any pressure to understand what the column names all mean just yet. 


## (Re)arranging the order

The **arrange()** function (for rows) and the **relocate()** function (for columns) allows us to re-order our data. 


### arrange()
Arrange can take one or more column names as an argument, and then arranges the row order based on the value in that column. 

```{webr}
bbPitching |> arrange(yearID) |> head()
```

This has arranged our data by yearID, starting with the earliest year first, showing us the records date back to 1871!

We can add a second column, in which case arrange() will *break ties* based on the data in the second column.
```{webr}
bbPitching |> arrange(yearID, W) |> head()
```

Here we have arranged by year, and then *within* year, players are ranked according to their number of wins (W). However, arrange() ranks from smallest to largest (ascending order) as a default, and I'd like to see the highest number of wins at the top of each year. I can do this with the **desc()** function:
```{webr}
bbPitching |> arrange(yearID, desc(W)) |> head()
```
Now, yearID is arranged from smallest to largest (ascending) and W is arranged from highest to lowest (descending). This provides us with an important example: Within a function, we can add additional arguments to control how that function works.

#### Exercise

What uses can you think of the arrange() function? Have you had to do something like this before? Did you encounter issues, and does the arrange() function have the same limitations? 


### relocate()

If you want to change the order of columns, the relocate() function takes a column name and moves it to another position in the dataset. By default, relocate will place the specified column at the start (left) of the dataset, but we can choose to place it immediately before, or immediately after, another column.

Let's move the teamID to the far left (which we will call the start or front of the dataset). 
```{webr}
bbPitching |> relocate(teamID) |> head()
```

We can also move multiple columns at once:
```{webr}
bbPitching |> relocate(W,L,G) |> head()
```

Note: because W, L, G are all next to one another, we could actually have written it as relocate(W:G). Also, columns don't need to already be next to each other to be moved as a group. relocate(W, L, EBB, R) would move these four columns from their various places to the left most positions (with W ending up on the far left, R being fourth in). 


Notice anything odd about the output of this function? If this has worked correctly, the columns should read: W, L, G, playerID. But, in the code above, we relocated yearID to the left of playerID. Why has it gone back???

This raises a crucial point about the dplyr verbs: they **do not modify the original data**. All the functions we have run so far are only ever taking the data, making the changes, and printing the result to the screen. The original data is never modified. If we want to save a copy of the data in the new format, we need to save that information into an object. In the space below, use the relocate() function to save a new object with the W, L and G columns at the far left. 
```{webr}
#| exercise: ex2_1
wlgPitching <- bbPitching |> ______ |> head()

wlgPitching |> head(n = 4)
```

::: { .hint exercise="ex2_1"}
::: { .callout-note collapse="false"}

wlgPitching <- bbPitching |> relocate(W,L,G) |> head()

:::
:::


### relocate() cont

The relocate() function is more flexible when we start to use the **.before** and **.after** arguments. As before, we need to specify the name of the column we want to move, and will then use either .before or .after and state another column name. 
```{webr}
bbPitching |> relocate(ERA, .after = playerID) |> head()
```

Use the relocate() function to get the column names in this order: 

The first six columns must be in this order: playerID, W, L, G, yearID, teamID, with stint and lgID *as the last two columns* The other columns can go in any order.

```{webr}
#| exercise: ex2_2
______ |> ______ |> head()
```

::: { .hint exercise="ex2_2"}
::: { .callout-note collapse="false"}
## Hint 1

There are two ways (at least) to achieve this outcome. 

First, we can move W, L, and G to immediately after playerID, save the output into an intermediate object, and then move stint and lgID to after GIDP. 

:::
:::
  
  
  
::: { .hint exercise="ex2_2"}
::: { .callout-note collapse="false"}
## Hint 2

That would look something like this: 

intermediateObject <- bbPitching |> relocate(W, L, G, .after = playerID)

intermediateObject |> relocate(stint, lgID, .after = GIDP)

:::
:::


::: { .hint exercise="ex2_2"}
::: { .callout-note collapse="false"}
## Hint 3

Another version of this option is to skip the intermediate object and simply pipe the output from the first function into a second instance of the relocate function, like this:

bbPitching |> relocate(W, L, G, .after = playerID) |>  relocate(stint, lgID, .after = GIDP)

Chaining functions with multiple uses of the pipe is very powerful!

:::
:::


#### Conclusions on ordering

A useful way to remember which function is for rows and which is for columns: the "r"s in arrange are for rows, and the "c" in relocate is for columns. arrange() is functionally a sorting function, while relocate() is more of a manual re-shuffling of the columns. 

Remember that these functions are not changing the original data - and that's most probably a very good thing! If you do want to keep the changes you are making, consider saving the transformed data into a new object rather than over-writing the original.



## Keeping or removing data

The next two functions we will look at are filter() (for rows) and select() (for columns). In both cases, we will specify which rows or columns we want to keep, and the rest will be discarded. As with the above two functions, we can use the *r* in filte*r* to remind us of "*r*ows" and the *c* in sele*c*t to remind us of "*c*olumns".

### filter()

filter() can be used to keep any rows that meet a certain criteria in a given column. We can keep rows with values which are greater than, less than, or equal to a value, and we can use terms like "*and*" or "*or*" (e.g., keep any row if the value is greater than 1 *or* less than -1). 

We will pipe the data to the filter function, specify a column name to work from, and then set the threshold for inclusion.

```{webr}
bbPitching |> filter(yearID > 2000) |> summary()
```

Note that we have not changed the order of the rows, or anything else about the data, but only rows collected *after* the year 2000 are included. If we wanted to include the year 2000, we could use:

```{webr}
bbPitching |> filter(yearID >= 2000) |> summary()
```

#### And / Or
We can also **combine** operators in either the "and" setting or the "or" setting. 

Modify the code below to filter for player information from the year ("yearID" column) 2000 until now **and** for those who played for the BOS (Boston) team (using the "teamID" column).

Note 1: when we want to specify equals (as in, teamID is equal to BOS), we must use "==" over "=".

Note 2: when using == we must put "BOS" in quotation marks.

Note 3: here we are using "&", but in some cases "," can be used to mean and.

```{webr}
#| exercise: ex2_3
bbPitching |> filter(______ ______ ______ & teamID == ______) |> head()
```


::: { .hint exercise="ex2_3"}
::: { .callout-note collapse="false"}
## Hint 1

There are four replacements to make: 

- Specify the column: year

- The operator "greater than or equal to": >=

- The year: 2000

- The teamID: BOS

Note that because BOS is a character, it needs to be in "" marks. 

:::
:::

::: { .solution exercise="ex2_3" }
::: { .callout-note collapse="false"}

bbPitching |> filter(yearID >= 2000 & teamID == "BOS")

:::
:::


We can also use "or" with two operators, with the | symbol.

```{webr}
bbPitching |> filter(teamID == "BOS" | teamID == "SFN") |> head()
```

This will return all rows where the teamID is "BOS" or is "SFN". 

### select()

The select() function works similarly to filter(), except it defines which columns are kept. 

#### Exercise

Having worked with arrange(), relocate(), and filter(), see if you work out how select() works. Keep the playerID and teamID, and pipe this to the head() function for display:

```{webr}
#| exercise: ex2_4
bbPitching |> _______ |> head()
```

::: { .hint exercise="ex2_4"}
::: { .callout-note collapse="false"}

Because we are keeping two columns we will need to use some form of "and". You might want to try "&", but for select() we need to use "," to separate the columns we want. 

:::
:::

::: { .solution exercise="ex2_4"}
::: { .callout-note collapse="false"}

bbPitching |> select(playerID, teamID) |> head()
:::
:::


The select() function has some alternative syntax that can be useful in certain situations (this is an excellent time to remind you that you **don't** need to memorise everything).

```{webr}
# Using the ":" will select every column between the two listed columns (inclusive)
bbPitching |> select(playerID:teamID) |> head()
```

```{webr}
# Alternatively, the "!" means "Not this!" and can be used on a single column or combined with the ":".
bbPitching |> select(!yearID:stint) |> head()
```

### select() advanced usage

We can also use select() to introduce you to a powerful feature of programming languages: the ability to perform pattern matching. We will cover pattern matching another time, but for now we can think of it as not needing to specify the exact name of every single column we want to keep. 

```{webr}
bbPitching |> select(starts_with("S")) |> head()
```

```{webr}
bbPitching |> select(ends_with("D")) |> head()
```

```{webr}
bbPitching |> select(contains("R")) |> head()
```

#### Exercise

What if you wanted to select all columns that contained either "R" or "r"?
```{webr}
#| exercise: ex2_5
bbPitching |> ______ |> head()
```

::: { .hint exercise="ex2_5"}
::: { .callout-note collapse="false"}

We need to use the "or" key: |

You might try 

bbPitching |> select(contains("R" | "r")) |> head()

But this will fail. Instead of providing the "|" to the contains() function, instead try providing it to the select() function.

:::
:::

::: { .solution exercise="ex2_5"}
::: { .callout-note collapse="false"}


bbPitching |> select(contains("R") | contains("r")) |> head()

In this format, the select() function will return any column that "contains R" **or** "contains r". 

:::
:::


## mutate()

Unlike the other dplyr verbs, the purpose of the mutate() function isn't immediately obvious from the name. The mutate() function will take information from one or more columns and create a new column to store the data in. 

Here we will calculate a new value, called the winLossRatio, by dividing W by L for each row. The new column will appear to the far right of the dataset.

```{webr}
bbPitching |> mutate(winLossRatio = W/L) |> head()
```

We can see that this hasn't worked as planned (or rather, it has worked as we planned, but there were unforeseen outcomes like Inf values).

In the space below, use the filter() function to remove any row where W or L is 0, then use the mutate() function to create the new winLossRatio column. Use the head() function to display your results. Feel free to add additional functions and arguments if you think they are useful. 

```{webr}
#| exercise: ex2_6
______ |> ______ |> ______ |> ______
```


::: { .hint exercise="ex2_6"}
::: { .callout-note collapse="false"}

The four underscores could be replaced with:

- The bbPitching dataset to be passed.

- The filter() function, using the "&" argument to set both W and L > 0.

- The mutate() function, creating winLossRatio by dividing W/L.

- The head() function.

:::
:::

::: { .solution exercise="ex2_6"}
::: { .callout-note collapse="false"}

bbPitching |> filter(W > 0 & L > 0) |> mutate(winLossRatio = W/L) |> head()


Out of interest, you could ask what the highest ratio is with arrange() and tail() (remembering that arrange sorts from smallest to largest by default).

bbPitching |> filter(W > 0 & L > 0) |> mutate(winLossRatio = W/L, .before = playerID) |> arrange(winLossRatio) |> tail()


Alternatively, you could use arrange(desc(winLossRatio)) and head(). 

Here I've also added the .before = argument, which we have seen (along with .after) with the relocate() function.
:::
:::

The solution to this exercise highlights the fact that mutate has created a new column that we can then apply functions to for further filtering or arranging of the dataset. 




## distinct() and rename()

These are both useful functions, though compared to mutate() or even arrange(), these functions are quite simple and so will only receive a short note here. 

The distinct() function will remove any duplicate rows and return the remaining unique (distinct) rows. By supplying two or more column names, we can look for distinct groupings. In the code below, I first use the table() function to determine that there are 19 rows for the first year of recording (1871). I then use the arrange() and head() functions (with an additional argument for the head function) to pass only data from 1871 to the distinct() function. Then, distinct(yearID, teamID) will return only those distinct combinations - revealing the names of the nine teams who were recorded in the first year.

```{webr}
bbPitching |> arrange(yearID) |> head(n = 19) |> distinct(yearID, teamID)
```

The rename() function takes an existing column name (BAOpp) and replaces it with a supplied name (BattingAverageOpponent):
```{webr}
bbPitching |> rename(BattingAverageOpponent = BAOpp) |> head()
```


## Conclusions
Conclude with the 'things they have in common' information


The final thing to take away from this episode is how easily we can chain together functions to manipulate our data into a form that suits us. With the pipe we can add many steps and they remain human readable: moving from left to right we start with data, we can filter it, calculate a new value, arrange the data, and view a portion of it. 
